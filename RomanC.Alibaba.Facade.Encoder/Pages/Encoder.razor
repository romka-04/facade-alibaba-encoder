@page "/"
@page "/encode"
@inject IJSRuntime JSRuntime
@inject IEncoderService  EncoderService

<EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit">
    <div class="form-group">
        <label for="messageContentXml">Message Content (XML)</label>
        <InputTextArea id="messageContentXml" class="form-control" rows="10" @bind-Value="Model.MessageContentXml" />
        <small id="messageContentXmlHelp" class="form-text text-muted">The main order of information. This expected to be XML serialized document.</small>
    </div>
    <div class="form-group">
        <label for="messageType">Message Type</label>
        <InputText id="messageType" class="form-control" @bind-Value="Model.MessageType" />
        <small id="messageTypeHelp" class="form-text text-muted">For instance 'CAINIAO_GLOBAL_LINEHAUL_ASN', 'LOGISTICS_BATCH_SEND' etc.</small>
    </div>
    <div class="form-group">
        <label for="secretKey">Secret Key provided by Cainiao</label>
        <InputText id="secretKey" class="form-control" @bind-Value="Model.SecretKey" />
        <small id="secretKeyHelp" class="form-text text-muted">Used to sign message. Might be not required at test environment.</small>
    </div>

    <DataAnnotationsValidator />
    <ValidationSummary />

    <button class="btn btn-primary" type="submit" disabled="@(!context.Validate() || !context.IsModified())">Encode</button>
</EditForm>
<hr />
<div class="form-group">
    <label for="encodedResult">Encoded string ready to use HTTP request body.</label>
    <textarea id="encodedResult" class="form-control" readonly="readonly" rows="10">
        @_encodedMsg
    </textarea>
</div>
<button type="button" class="btn btn-primary" disabled="@(!HasEncodedMsg)" @onclick="CopyTextToClipboard">Copy to Clipboard</button>

@code {
    private EncodeViewModel Model = new();
    private string _encodedMsg;
    private bool HasEncodedMsg => !string.IsNullOrWhiteSpace(_encodedMsg);

    private async Task HandleValidSubmit()
    {
        _encodedMsg = await EncoderService.Encode(Model, CancellationToken.None);
    }

    private async Task CopyTextToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copy", _encodedMsg);
    }

}